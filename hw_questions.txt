Questions

1) What is responsible for defining the routes of the games resource?

- create_router.js

2) What do you notice about the folder structure? Whats the client responsible for? Whats the server responsible for?

- the client side of the file structure predominately deals with the frontend and client requests, whereas the server folder deals with storing dating and handling any requested changes. The GamesService is also responsible for directing what type of request the client will make.

3) What are the the responsibilities of server.js?

- server.js is responsible for handling requests from the client, passing them to the server, then returning the results to the client.

4) What are the responsibilities of the gamesRouter?

- gamesRouter makes the gamesCollection (the collection 'games' from MongoDB) available to the app via app.use

5) What process does the the client (front-end) use to communicate with the server?

- The GamesService function within GamesService.js

6) What optional second argument does the fetch method take? And what is it used for in this application? Hint: See Using Fetch on the MDN docs

- The fetch() method can optionally accept an 'init' object as a second argument. In this app, it is used to determine the type of request method from the client.

7) Which of the games API routes does the front-end application consume (i.e. make requests to)?

- router.get('/'), router.post('/'), router.delete('/:id')

8) What are we using the MongoDB Driver for?

- It allows us to connect to MongoDB and manipulate the data, as well as make requests.

EXT. Why do we need to use ObjectId from the MongoDB driver?

- Each document within a database needs to be uniquely identified to avoid conflicts.

